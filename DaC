void multiplicacionDAC(vector<vector<int>>& A, vector<vector<int>>& B, vector<vector<int>>& C, int n) {
    if (n == 1) {
        C[0][0] = A[0][0] * B[0][0];
    } else {
        int m = n / 2;
        vector<vector<int>> A11(m, vector<int>(m)), A12(m, vector<int>(m)), A21(m, vector<int>(m)), A22(m, vector<int>(m));
        vector<vector<int>> B11(m, vector<int>(m)), B12(m, vector<int>(m)), B21(m, vector<int>(m)), B22(m, vector<int>(m));
        vector<vector<int>> C11(m, vector<int>(m)), C12(m, vector<int>(m)), C21(m, vector<int>(m)), C22(m, vector<int>(m));

        // Dividir las matrices A y B en 4 submatrices
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < m; j++) {
                A11[i][j] = A[i][j];
                A12[i][j] = A[i][j + m];
                A21[i][j] = A[i + m][j];
                A22[i][j] = A[i + m][j + m];
                B11[i][j] = B[i][j];
                B12[i][j] = B[i][j + m];
                B21[i][j] = B[i + m][j];
                B22[i][j] = B[i + m][j + m];
            }
        }

        // Realizar multiplicaciÃ³n recursiva
        multiplicacionDAC(A11, B11, C11, m);
        multiplicacionDAC(A12, B21, C12, m);
        multiplicacionDAC(A21, B11, C21, m);
        multiplicacionDAC(A22, B21, C22, m);

        // Combinar los resultados
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < m; j++) {
                C[i][j] = C11[i][j] + C12[i][j];
                C[i + m][j] = C21[i][j] + C22[i][j];
            }
        }
    }
}
